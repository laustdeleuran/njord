////
/// The most broadly named module encompasses a wide range of - well, erm - helpers. Everything from small functions and silent classes to large mixins.
///
/// @group 1.helpers
////



/// Basic text hider.
///
/// @example scss - Basic usage
///	.hide-text {
///		@extend %hide-text;
///	}
///
/// @example scss - Basic usage output
///	.hide-text {
///		text-indent: 200%;
///		white-space: nowrap;
///		overflow: hidden;
///	}
%hide-text {
	text-indent: 200%;
	white-space: nowrap;
	overflow: hidden;
}

/// Screen reader only content - [See the explanation on A11Y Project](http://a11yproject.com/posts/how-to-hide-content/)
///
/// @example scss - Basic usage
///	.sr-only {
///		@extend %sr-only;
///	}
///
/// @example scss - Basic usage output
///	.sr-only {
///		position: absolute;
///		width: 1px;
///		height: 1px;
///		margin: -1px;
///		padding: 0;
///		overflow: hidden;
///		clip: rect(0,0,0,0);
///		border: 0;
///	}
%sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0,0,0,0);
	border: 0;
}

/// Create layout elements from pseudo elements with no content.
///
/// @example scss - Basic usage
///	.pseudo-block:after {
///		@extend %pseudo-block;
///	}
///
/// @example scss - Basic usage output
///	.pseudo-block:after {
///		text-indent: 100%;
///		white-space: nowrap;
///		overflow: hidden;
///		content: '';
///		display: block;
///	}
%pseudo-block {
	content: '';
	display: block;
}

/// List helper (because you do this all the time).
///
/// @example scss - Basic usage
///	.nav-list {
///		@extend %list-helper;
///	}
///
/// @example scss - Basic usage output
///	.nav-list {
///		display: block;
///		padding: 0;
///		margin: 0;
///		list-style: none;
///	}
%list-helper {
	display: block;
	padding: 0;
	margin: 0;
	list-style: none;
}

/// Standard clearfix
///
/// @example scss - Basic usage
///	.float-container:after {
///		@extend %clearfix;
///	}
///
/// @example scss - Basic usage output
///	.float-container:after {
///		display: block;
///		content: '';
///		clear: both;
///		height: 0;
///
///		font-size: 0;
///
///		visibility: hidden;
///	}
%clearfix {
	display: block;
	content: '';
	clear: both;
	height: 0;

	font-size: 0;

	visibility: hidden;
}




/// Polyfills for before elements (for IE7 and IE8 if JS changes needed). Be aware that you need to use JS to add <span class="before" /> (preferably via JS) to get the benefit of these polyfill styles.
///
/// @content
@mixin poly-before {
	&:before {
		content: '';
		@content;
	}
	&>.before {
		@content;
	}
}

/// Polyfills for after elements (for IE7 and IE8 if JS changes needed). Be aware that you need to use JS to add <span class="before" /> (preferably via JS) to get the benefit of these polyfill styles.
///
/// @content
@mixin poly-after {
	&:after {
		content: '';
		@content;
	}
	&>.after {
		@content;
	}
}


/// Active styles for link-type elements
///
/// @content
///
/// @example scss - Basic usage
///	a {
///		text-decoration: none;
///
///		@include link-active {
///			text-decoration: underline;
///		}
///	}
///
/// @example scss - Basic usage output
///	a {
///		text-decoration: none;
///	}
///	a:focus,
///	a:active,
///	.no-touchevents a:hover {
///		text-decoration: underline;
///	}
@mixin link-active {
	&:focus,
	&:active,
	.no-touchevents &:hover,
	.no-js &:hover {
		@content;
	}
}

/// Mixin for scrolling shadows. [Codepen example](http://codepen.io/laustdeleuran/pen/DBaAu).
///
/// @param {Letter} $direction [Y] - Determines scroll direction. Should be `Y` or `X`.
/// @param {Color} $background-color [rgba(255, 255, 255)] - Container background color.
/// @param {Number} $shadow-intensity [0.2] - Shadow opacity.
/// @param {Color} $shadow-color [0.2] - Shadow color.
/// @param {Pixels} $cover-size [40px] - Set the size of the shadow covering gradient.
/// @param {Pixels} $shadow-size [14px] - Set the size of the shadow.
///
/// @example scss - Basic usage
///	div {
///		overflow: auto;
///		height: 300px;
///		@include scrolling-shadows();
///	}
@mixin scrolling-shadows($direction: Y, $background-color: rgb(255, 255, 255), $shadow-intensity: 0.2, $shadow-color: rgb(0,0,0), $cover-size: 40px, $shadow-size: 14px) {

	@if $direction == X {
		@include background-image(
			// Shadow covers
			linear-gradient(to right, $background-color 30%, rgba($background-color, 0)),
			linear-gradient(to right, rgba($background-color, 0), $background-color 70%),

			// Shadows
			radial-gradient(farthest-side at 0 50%, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)),
			radial-gradient(farthest-side at 100% 50%, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0))
		);
		background-repeat: no-repeat;
		background-color: $background-color;
		background-size: $cover-size 100%, $cover-size 100%, $shadow-size 100%, $shadow-size 100%;
		background-position: 0 0, 100% 0, 0 0, 100% 0;

		// Opera doesn't support this in the shorthand
		background-attachment: local, local, scroll, scroll;
	} @else {
		@include background-image(
			// Shadow covers
			linear-gradient(to bottom, $background-color 30%, rgba($background-color, 0)),
			linear-gradient(to bottom, rgba($background-color, 0), $background-color 70%),

			// Shadows
			radial-gradient(farthest-side at 50% 0, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)),
			radial-gradient(farthest-side at 50% 100%, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0))
		);
		background-repeat: no-repeat;
		background-color: $background-color;
		background-size: 100% $cover-size, 100% $cover-size, 100% $shadow-size, 100% $shadow-size;
		background-position: 0 0, 0 100%, 0 0, 0 100%;

		// Opera doesn't support this in the shorthand
		background-attachment: local, local, scroll, scroll;
	}
}

/// CSS Arrows mixin
///
/// @author [bpainter](https://gist.github.com/bpainter/1085320)
///
/// @param {String} $direction - Arrow direction. Should be `'top'`, `'right'`, `'bottom'`, `'left'`, `'top-left'`, `'top-right'`, `'bottom-left'` or `'bottom-right'`.
/// @param {Color} $color - Arrow color.
/// @param {Size} $size - Arrow size.
///
/// @example scss - Basic usage
///	.arrow-up {
///		@include arrow('top', black, 10px);
///	}
@mixin arrow($direction, $color, $size) {
	display:block;
	height: 0;
	width: 0;
	@if $direction == 'top' {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size * 1.5 solid $color;
	}
	@else if $direction == 'right' {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size * 1.5 solid $color;
	}
	@else if $direction == 'bottom' {
		border-top: $size * 1.5 solid $color;
		border-right: $size solid transparent;
		border-left: $size solid transparent;
	}
	@else if $direction == 'left' {
		border-top: $size solid transparent;
		border-right: $size * 1.5 solid $color;
		border-bottom: $size solid transparent;
	}
	@else if $direction == 'top-left' {
		border-top: $size solid $color;
		border-right: $size solid transparent;
	}
	@else if $direction == 'top-right' {
		border-top: $size solid $color;
		border-left: $size solid transparent;
	}
	@else if $direction == 'bottom-left' {
		border-bottom: $size solid $color;
		border-right: $size solid transparent;
	}
	@else if $direction == 'bottom-right' {
		border-bottom: $size solid $color;
		border-left: $size solid transparent;
	}
}



/// Experimental support for Mozilla
///
/// @group _internals
/// @type Int
$experimental-support-for-mozilla: true !default;

/// Experimental support for Webkit
///
/// @group _internals
/// @type Bool
$experimental-support-for-webkit: true !default;

/// Experimental support for Opera
///
/// @group _internals
/// @type Bool
$experimental-support-for-opera: true !default;

/// Experimental support for Microsoft
///
/// @group _internals
/// @type Bool
$experimental-support-for-microsoft: true !default;

/// Experimental support for KHTML
///
/// @group _internals
/// @type Bool
$experimental-support-for-khtml: false !default;

/// Experimental support mixin.
///
/// @author [Compass](http://compass-style.org/)
///
/// @param $property
/// @param $value
///
/// @example scss - Basic usage
///	.box-sizing {
///		@include experimental(box-sizing, border-box);
///	}
@mixin experimental($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }
  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }
  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }
  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }
  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }
  @if $official                                        {         #{$property} : $value; }
}
