////
/// A bunch of typography related mixins to support vertical rhythm, originally ported from [Compass](http://compass-style.org/) when I started to use [LibSass](http://libsass.org/). In combination with [Bourbon's modular scale](http://bourbon.io/docs/#modular-scale) it's pretty neat.
///
/// @group 3.typography
////

/// Base font size
///
/// @type Size
$base-font-size: 18px !default;

/// Base line height
///
/// @type Size
$base-line-height: 14px !default;

/// Minimum line padding
///
/// @type Size
$min-line-padding: 2px !default;

/// Round vertical rhythm to nearest half line height
///
/// @type Bool
$round-to-nearest-half-line: true !default;

/// Browser default font size
///
/// @group _internals
/// @type Size
$browser-default-font-size: 16px !default;


/// Strip units - see [StackOverflow for details](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass).
///
/// @group _internals
///
/// @param {Size} $number
/// @return {Number}
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

/// Convert Bourbon's modular scale to pixels
@function modular-scale-pixels($scale) {
	@return strip-units(modular-scale($scale)) * $base-font-size;
}

/// Convert font size to EMs
///
/// @group _internals
@function em($target, $context: $base-font-size) {
	@if $target == 0 {
		@return 0;
	}
	
	@return $target / $context + 0em;
}

/// Return line-height based on number of lines
///
/// @group _internals
@function rhythm($lines, $font-size: $base-font-size) {
	@return em($lines * $base-line-height, $font-size);
}

/// Calculate amount of vertical lines needed for given font-size
///
/// @group _internals
@function lines-for-font-size($font-size, $padding: true) {
	$lines: if($round-to-nearest-half-line,
		ceil(2 * $font-size / $base-line-height) / 2,
		ceil($font-size / $base-line-height));

	// If lines are cramped include some extra lead.
	@if ($padding) {
		@if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
			$lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
		}
	}

	@return $lines;
}

/// Establish baseline
@mixin establish-baseline($font-size: $base-font-size, $relative-font-sizing: true) {
	$relative-size: 100% * $font-size / $browser-default-font-size;
	$lines: lines-for-font-size($font-size);

	@if ($relative-font-sizing) {
		font-size: $relative-size;
		line-height: $lines * $base-line-height / $font-size;
	} @else {
		font-size: $font-size;
		line-height: $lines * $base-line-height;
	}
}

/// Leader spacing
@mixin leader($lines, $font-size: $base-font-size, $property: margin) {
	#{$property}-top: rhythm($lines, $font-size);
}

/// Trailer spacing
@mixin trailer($lines, $font-size: $base-font-size, $property: margin) {
	#{$property}-bottom: rhythm($lines, $font-size);
}

/// Adjust leading
///
/// @group _internals
@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
	line-height: rhythm($lines, $font-size);
}

/// Set font size and line height to play nice with your vertical rhythm
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
	@if $lines == auto {
		$lines: lines-for-font-size($to-size);
	}
	font-size: em($to-size, $from-size);
	@include adjust-leading-to($lines, $to-size);
}