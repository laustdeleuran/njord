////
/// I dislike CSS grid systems, as they mostly encourage implementation through classes in your markup, which in turn leads to confusion about when a module looks like what (breaking the seperation of concerns across your codebase). Secondly, I find a lot of them way too opinionated. So, for the odd event that I really need a grid system, I tend to roll my own. This is it.
///
/// @group 4.grid
////



/// Grid gutter definition. Overwrite this in your own project if needed.
///
/// @type Size
$grid-gutter: 30px !default;

/// Grid column count. Overwrite this in your own project if needed.
///
/// @type Int
$grid-columns: 8 !default;



/// Internal helper for creating grid widths
///
/// @group _internals
/// @param {Integer} $cols - Number of columns
/// @return {Percentage} Column width
@function grid-col-width($cols) {
	@return percentage($cols/$grid-columns);
}



/// Grid row styles as an include for more effortless (but bloatier) coding
///
/// @group _internals
///
/// @example scss - Basic usage
///	.grid__row {
///		@include grid-col-padding;
///	}
///
/// @example scss - Basic usage output
///	.grid__row {
///		margin-left: -15px;
///		margin-right: -15px;
///	}
@mixin grid-row-margin {
	margin-left: - $grid-gutter / 2;
	margin-right: - $grid-gutter / 2;
}

/// Grid row styles that can be hoisted without problems
///
/// @group _internals
///
/// @example scss - Basic usage
///	.grid__row {
///		@extend %grid__row;
///	}
///
/// @example scss - Basic usage output
///	.grid__row {
///		margin-left: -15px;
///		margin-right: -15px;
///	}
%grid__row {
	@include grid-row-margin;
}

/// Grid row padding styles as an include for more effortless (but bloatier) coding
///
/// @group _internals
///
/// @example scss - Basic usage
///	.grid__col--padding {
///		@include grid-col-padding;
///	}
///
/// @example scss - Basic usage output
///	.grid__col--padding {
///		box-sizing: border-box;
///		padding-left: 15px;
///		padding-right: 15px;
///	}
@mixin grid-col-padding {
	box-sizing: border-box;
	padding-left: $grid-gutter / 2;
	padding-right: $grid-gutter / 2;
}

/// Grid row padding styles that can be hoisted without problems
///
/// @group _internals
///
/// @example scss - Basic usage
///	.grid__col--padding {
///		@extend %grid__col--padding;
///	}
///
/// @example scss - Basic usage output
///	.grid__col--padding {
///		box-sizing: border-box;
///		padding-left: 15px;
///		padding-right: 15px;
///	}
%grid__col--padding {
	@include grid-col-padding;
}



/// Grid column mixin for easy usage in projects.
///
/// @param {Integer} $cols [1] - Number of columns
/// @param {Bool} $padding [true] - Add padding
/// @param {Bool} $hoist [false] - Determines if padding should be hoisted via silent classes. Off by default, but produces bloatier code. If used, be sure to only use outside @media queries.
///
/// @example scss - Basic usage
///	.my-column {
///		@include grid-col(1);
///	}
///
/// @example scss - Basic usage output
///	.my-column { // Some styles are mixed in directly, so they can be easily overwritten in @media queries.
///		float:left;
///		width: 12.5%; // 1 column default width
///		box-sizing: border-box;
///		padding-left: 15px;
///		padding-right: 15px;
///	}
@mixin grid-col($cols: 1, $padding: true, $hoist: false) {
	float: left;
	width: grid-col-width($cols);

	@if ($padding) {
		@if ($hoist) {
			@extend %grid__col--padding;
		} @else {
			@include grid-col-padding;
		}
	}
}

/// Push grid column N amount of columns. Could theoretically be used to pull columns by passing negative `$cols
///
/// @param {Integer} $cols [1] - Number of columns
///
/// @example scss - Basic usage
///	.my-column {
///		@include grid-push(1);
///	}
///
/// @example scss - Basic usage output
///	.my-column { // Some styles are mixed in directly, so they can be easily overwritten in @media queries.
///		margin-left: 12.5%; // 1 column default width
///	}
@mixin grid-push($cols: 1) {
	margin-left: grid-col-width($cols);
}

/// Grid row container. Clears float and adds negative margin to allow for grid gutters. Clears via [`%clearfix` in Helpers](#1.helpers-placeholder-clearfix), so remember to include or create that if you use the modules by themselves. Uses silent classes, so should only be used outside media queries.
///
/// @param {Bool} $margin [true] - Add negative margin
/// @param {Bool} $clearfix [true] - Add clearfix
/// @param {Bool} $hoist [true] - Determines if padding should be hoisted via silent classes. On by default, but turn it on to use this mixin inside @media queries. This will produce bloatier code.
///
/// @example scss - Basic usage
///	.my-row {
///		@include grid-row;
///	}
///
///
/// @example scss - Basic usage output
///	.my-row:after { // Clearfix is hoisted via silent class in Helpers.
///		display: block;
///		content: '';
///		clear: both;
///		height: 0;
///
///		font-size: 0;
///
///		visibility: hidden;
///	}
///	%grid__row, .my-row { // Margin is hoisted via silent classes. This allows for easier overwrites.
///		margin-left: -15px;
///		margin-right: -15px;
///	}
@mixin grid-row($margin: true, $clearfix: true, $hoist: true) {
	@if ($margin) {
		@if ($hoist) {
			@extend %grid__row;
		} @else {
			@include grid-row-margin;
		}
	}
	@if ($clearfix) {
		@if ($hoist) {
			&:after {
				@extend %clearfix;
			}
		} @else {
			&:after {
				@include clearfix;
			}
		}
	}
}
